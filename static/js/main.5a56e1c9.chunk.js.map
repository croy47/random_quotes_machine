{"version":3,"sources":["reducer.js","context.js","QuoteContainer.js","Loader.js","App.js","index.js"],"names":["reducer","state","action","type","randomIndex","Math","floor","random","payload","length","quotes","loading","index","previousIndex","bigScreen","newIndex","AppContext","React","createContext","initialState","AppProvider","children","useReducer","dispatch","fetchQuotes","a","fetch","response","json","useEffect","window","innerWidth","Provider","value","getNewQuote","console","log","getPreviousQuote","useGlobalContext","useContext","QuoteContainer","quote","text","author","urlToTweet","encodeURIComponent","className","id","href","target","rel","onClick","src","alt","Loader","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a56e1c9.chunk.js","sourcesContent":["const reducer = (state, action) => {\r\n  if (action.type === \"QUOTES_FETCHED\") {\r\n    let randomIndex = Math.floor(Math.random() * (action.payload.length - 1));\r\n    return {\r\n      ...state,\r\n      quotes: action.payload,\r\n      loading: false,\r\n      index: randomIndex,\r\n      previousIndex: randomIndex,\r\n    };\r\n  }\r\n\r\n  //SCREEN SIZE DETECTION only on initial render\r\n  if (action.type === \"SMALL_SCREEN_DETECTED\") {\r\n    return { ...state, bigScreen: false };\r\n  }\r\n  if (action.type === \"GET_QUOTE\") {\r\n    let newIndex = Math.floor(Math.random() * (state.quotes.length - 1));\r\n    if (newIndex === state.index) {\r\n      newIndex = state.index + 1;\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      index: newIndex,\r\n      previousIndex: state.index !== null && state.index,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"GO_BACK_IN_TIME\") {\r\n    return {\r\n      ...state,\r\n      index: state.previousIndex,\r\n      previousIndex: state.index,\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nexport default reducer;\r\n","import React, { useContext, useReducer, useEffect } from \"react\";\r\nimport reducer from \"./reducer\";\r\n\r\n//url to fetch quotes from\r\nconst url = \"https://type.fit/api/quotes\";\r\n//context\r\nconst AppContext = React.createContext();\r\n//it will give two things, Provider and Consumer\r\n\r\n//initialState\r\nconst initialState = {\r\n  loading: true,\r\n  quotes: [],\r\n  index: null,\r\n  bigScreen: true,\r\n  previousIndex: null,\r\n};\r\n\r\nconst AppProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  //function responsible for fetching Quotes\r\n\r\n  const fetchQuotes = async () => {\r\n    const response = await fetch(url);\r\n    const quotes = await response.json();\r\n    dispatch({ type: \"QUOTES_FETCHED\", payload: quotes });\r\n  };\r\n\r\n  //when page renders for the first time, quotes be fetched.\r\n  useEffect(() => {\r\n    fetchQuotes();\r\n    //checkScreenSize\r\n    let width = window.innerWidth;\r\n    if (width < 600) {\r\n      dispatch({ type: \"SMALL_SCREEN_DETECTED\" });\r\n    }\r\n  }, []);\r\n\r\n  const getNewQuote = () => {\r\n    console.log(\"test\");\r\n    dispatch({ type: \"GET_QUOTE\" });\r\n  };\r\n\r\n  const getPreviousQuote = () => {\r\n    dispatch({ type: \"GO_BACK_IN_TIME\" });\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{ ...state, fetchQuotes, getNewQuote, getPreviousQuote }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useGlobalContext = () => {\r\n  return useContext(AppContext);\r\n};\r\n\r\nexport { AppContext, AppProvider };\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"./context\";\r\nimport { FaQuoteLeft, FaQuoteRight } from \"react-icons/fa\";\r\n\r\nconst QuoteContainer = () => {\r\n  const { quotes, index, getNewQuote, getPreviousQuote, bigScreen } =\r\n    useGlobalContext();\r\n  // console.log(index);\r\n\r\n  let { text: quote, author } = quotes[index];\r\n  // console.log(quote, author);\r\n\r\n  const urlToTweet =\r\n    \"https://twitter.com/intent/tweet?hashtags=quotes&text=\" +\r\n    encodeURIComponent(quote + \"-\" + author);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div id=\"quote-box\">\r\n        <blockquote id=\"text\">\r\n          <FaQuoteLeft />\r\n          <p id=\"quote\">{quote}</p>\r\n          <FaQuoteRight />\r\n          <cite id=\"author\">\r\n            <b>{author}</b>\r\n          </cite>\r\n        </blockquote>\r\n\r\n        <div className=\"buttons\">\r\n          <div className=\"icons\">\r\n            <a\r\n              className=\"quote-btn\"\r\n              href={urlToTweet}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              Tweet This\r\n            </a>\r\n          </div>\r\n\r\n          <div id=\"changeQuote-btn\">\r\n            <button\r\n              id=\"prev-quote\"\r\n              className=\"quote-btn\"\r\n              onClick={getPreviousQuote}\r\n            >\r\n              {`${bigScreen ? \"Previous Quote\" : \"Previous\"}`}\r\n            </button>\r\n            <button id=\"new-quote\" className=\"quote-btn\" onClick={getNewQuote}>\r\n              {`${bigScreen ? \" Next Quote\" : \"Next\"}`}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <footer>\r\n        <a href=\"mailto:croy4744@gmail.com\">\r\n          <img\r\n            src=\"https://avatars.githubusercontent.com/u/77880663?v=4\"\r\n            alt=\"Chandan Roy\"\r\n          />\r\n        </a>\r\n        <p>\r\n          <u>Designed by Chandan Roy on 29.04.2021</u>\r\n        </p>{\" \"}\r\n        <p>\r\n          <a\r\n            href=\"https://github.com/croy47/random_quotes_machine\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            {\" \"}\r\n            Source Code\r\n          </a>\r\n        </p>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuoteContainer;\r\n","import React from \"react\";\r\n\r\nexport const Loader = () => {\r\n  return <div className=\"loader\"></div>;\r\n};\r\n","import React from \"react\";\nimport { useGlobalContext } from \"./context\";\nimport QuoteContainer from \"./QuoteContainer\";\nimport { Loader } from \"./Loader\";\n\nfunction App() {\n  const { loading } = useGlobalContext();\n  if (loading) {\n    return <Loader />;\n  }\n  return <QuoteContainer />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style.css\";\nimport App from \"./App\";\nimport { AppProvider } from \"./context\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}